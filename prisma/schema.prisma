
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transactions            Transaction[]
  budgets                 Budget[]
  categories              Category[]
  income                  Income[]
  notifications           Notification[]
  notificationPreferences NotificationPreference?

  @@map("users")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  color       String?
  icon        String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]

  @@unique([name, userId])
  @@map("categories")
}

model Transaction {
  id          String            @id @default(uuid())
  amount      Decimal           @db.Decimal(10, 2)
  description String
  date        DateTime
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  merchant    String?
  notes       String?
  receiptUrl  String?
  userId      String
  categoryId  String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@map("transactions")
}

model Budget {
  id         String       @id @default(uuid())
  name       String
  amount     Decimal      @db.Decimal(10, 2)
  spent      Decimal      @default(0) @db.Decimal(10, 2)
  period     BudgetPeriod
  startDate  DateTime
  endDate    DateTime
  userId     String
  categoryId String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])

  @@map("budgets")
}

model Income {
  id          String   @id @default(uuid())
  userId      String
  amount      Decimal  @db.Decimal(10, 2)
  description String?
  source      String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("income")
}

model Notification {
  id        String           @id @default(uuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  metadata  Json?
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationPreference {
  id                  String   @id @default(uuid())
  budgetAlerts        Boolean  @default(true)
  spendingWarnings    Boolean  @default(true)
  goalNotifications   Boolean  @default(true)
  paymentReminders    Boolean  @default(true)
  emailNotifications  Boolean  @default(false)
  pushNotifications   Boolean  @default(true)
  userId              String   @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  REIMBURSED
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum NotificationType {
  BUDGET_ALERT
  SPENDING_WARNING
  GOAL_ACHIEVED
  PAYMENT_REMINDER
  TRANSACTION_APPROVED
  BUDGET_EXCEEDED
  MONTHLY_SUMMARY
  INCOME_ADDED
}